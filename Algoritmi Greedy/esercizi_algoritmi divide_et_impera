esercizi_algoritmi divide_et_impera
// posso moodificare l'algoritmo dividi et impera per trovare la distanza minima tra due punti sul piano cartesiano

def distanza_min_tra_due_punti(I : insieme di punti ordinato)		//l'ordinamento dell'insieme può essere fatto in un'altra funzione e ha costo O(n(log(n)))
	if len(I) == 0{
		return 0
	}
	if len(I) == 1{
		return 0
	}
	if len(I) == 2{
		return mod(x2 - x1)
	}
	m = len(I) / 2
	L = distanza_min_tra_due_punti(I da 0 a m)
	R = distanza_min_tra_due_punti(I da m+1 a len(I) - 1)
	lambda = min(L,R)

	fascia = []
	for i in I{
		if m-lambda <= i <= m+lambda{
			fascia.append(i)
		}
	}

	for i in I{
		for j da 1 a 3{
			lambda = min(lambda, I[i+j])
		}
	}
	return lambda

---------------------------------------------------------------------------------------------------	

def singolo(A: array ordinato di cardinalità dispari)
	if len(A) == 0{
		return 0
	} 
	if len(A) == 1{
		return A
	}
	m = len(A) / 2
	if A[m] != A[m-1] != A[m+1]{
		return A[m]
	} 
	else{
		if a[m] == a[m-1]{
			m -= 1
		}
		if len(A[1:m]) % 2 == 1{
			return singolo(A[1:m])
		}
		else{
			return singolo(A[m, len(A)-1])
		}
	}

---------------------------------------------------------------------------------------------------	

def maj(A: array ordinato di cardinalità dispari)
	if len(A) == 0{
		return Null
	}
	if len(A) == 1{
		return A
	}
	if len(A) == 2 && A[0] == A[1]{
		return A[0]					// oppure A[1]
	}
	m = len(A) / 2
	R = maj(A[0:m])
	L = maj(A[m+1:len(A)-1])
	count = 0

	for i=0,i<=len(A)-1,i++{
		if A[i] == R
		count ++
	}

	if count > m{
		return R
	}

	count = 0
	for i=0,i<=len(A)-1,i++{
		if A[i] == R
		count ++
	}

	if count > m{
		return L
	}

	return Null
	
---------------------------------------------------------------------------------------------------	

def singolo(A : array ordinato e di cardinalità dispari)
	if len(A) == 0{
		print("input sbagliato")
		return null
	}
	if len(A) ==1{
		return A
	}
	m = len(A) / 2
	if A[m] != A[m+1] != A[m-1]{
		return A[m]
	}
	else{
		if A[m] = A[m-1]{
			m -= 1
		}
		if (m % 2) != 1{
			singolo(A[0:m])
		}
		singolo(A[m:len(A)-1])
	}
